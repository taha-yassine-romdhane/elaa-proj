// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

enum Role {
  CUSTOMER
  ADMIN
  SUPPLIER
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders    Order[]
  role      Role     @default(CUSTOMER)
}

model Product {
  id          Int            @id @default(autoincrement())
  name        String
  price       Decimal        @default(0)
  color       String
  description String?
  isDeleted   Boolean        @default(false)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  images      ProductImage[]
  sizes       ProductSize[]
  supplier    Supplier       @relation(fields: [supplierId], references: [id])
  supplierId  Int
  category    Category       @relation(fields: [categoryId], references: [id])
  categoryId  Int
  orderItems  OrderItem[]
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  url       String
  isMain    Boolean @default(false)
  product   Product @relation(fields: [productId], references: [id])
  productId Int
}

model Order {
  id               Int             @id @default(autoincrement())
  status           OrderStatus     @default(PENDING)
  total            Decimal
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  items            OrderItem[]
  user             User            @relation(fields: [userId], references: [id])
  userId           Int
  deliveryPerson   DeliveryPerson? @relation(fields: [deliveryPersonId], references: [id])
  deliveryPersonId Int?
}

model OrderItem {
  id        Int          @id @default(autoincrement())
  quantity  Int
  price     Decimal
  product   Product      @relation(fields: [productId], references: [id])
  productId Int
  size      ProductSize? @relation(fields: [sizeId], references: [id])
  sizeId    Int?
  order     Order        @relation(fields: [orderId], references: [id])
  orderId   Int
}

model ProductSize {
  id         Int         @id @default(autoincrement())
  name       String
  stock      Int         @default(0)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  productId  Int
  product    Product     @relation(fields: [productId], references: [id])
  sku        String      @unique
  orderItems OrderItem[]
}

model Supplier {
  id        Int       @id @default(autoincrement())
  name      String
  email     String
  phone     String
  address   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

model DeliveryPerson {
  id              Int      @id @default(autoincrement())
  name            String
  phone           String
  email           String
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  orders          Order[]
  vehicleType     String
  currentLocation String
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
}
